.. _ref-django-aws-gettingstarted:


===============
Getting started
===============

This document is designed to get you up and running with ``django-aws``...


Prerequisites
=============

These are the requirements to run ``django-aws``:

 * Python **2.4+** (Python 3.x is **not** supported yet)
 * Django **1.2+**
 * boto

These dependencies should be added to your ``requirements/project.txt`` file
and installed using pip_. For example::

    pip install -r requirements/project.txt

In addition to the software requirements outlined above, you will need an
`Amazon AWS`_ account that has EC2 services enabled to be able to run background
jobs on the cloud.


Installation
============

Add ``pdf`` to your ``INSTALLED_APPS``:

.. code-block:: python

    INSTALLED_APPS = [
        # ...
        "aws",
    ]

Hook up ``aws`` to your URLconf:

.. code-block:: python

    urlpatterns = patterns("",
        # ...
        url(r"^aws/", include("aws.urls"))
    )


Usage
=====

Template Tags
-------------

get_buckets
^^^^^^^^^^^

Gets a list of bucket objects.

Syntax::

    {% get_buckets as [varname] %}


Example::

    {% get_buckets as buckets %}
    <ul>
    {% for bucket in buckets %}
        <li>{{ bucket.name }}</li>
    {% endfor %}
    </ul>


list_bucket
^^^^^^^^^^^

Gets a list of objects inside a particular bucket.

Syntax::

    {% list_bucket [bucket_name] [prefix] as [varname] %}


Example::

    {% list_bucket example.com images as image_list %}
    <ul>
    {% for key in image_list %}
        <li>{{ key.name }} ({{key.size|filesizeformat}})</li>
    {% endfor %}
    </ul>


get_object_info
^^^^^^^^^^^^^^^

Gets information about a particular object.

Syntax::

    {% get_object_info [bucket_name] [key_name] as [varname] %}


Example::

    {% get_object_info example.com images/2008/07/01/cool.png as image %}
    <ul>
        <li>Name: {{ image.name }}</li>
        <li>Size: {{ image.size|filesizeformat }}</li>
        <li>MD5: {{ image.md5 }}</li>
        <li>Owner: {{ image.owner }}</li>
        <li>Content Type: {{ image.content_type }}</li>
    </ul>


get_running_nodes
^^^^^^^^^^^^^^^^^

Syntax::

    {% get_running_nodes as [varname] %}


Example::

    {% get_running_nodes as nodes %}
    <ul>
    {% for node in nodes %}
        <li>{{ node.public_dns_name }}</li>
        <li>{{ node.state }}</li>
        <li>{{ node.launch_time }}</li>
    {% endfor %}
    </ul>


get_queues
^^^^^^^^^^

Syntax::

    {% get_queues as [varname] %}


Example::

    {% get_queues as queues %}
    <ul>
    {% for queue in queues %}
        <li>{{ queue.name }} ({{ queue.count }})</li>
    {% endfor %}
    </ul>


get_message_count
^^^^^^^^^^^^^^^^^

Syntax::

    {% get_message_count [queue_name] as [varname] %}


Example::

    {% get_message_count "myqueue" as queue_count %}
    <p>There are {{ queue_count }} messages in the 'myqueue' queue.</p>


Management Commands
-------------------

The ``syncaws`` management command seeds the cache with information about your
objects on S3.  The syntax is simple:

::

    python manage.py syncaws

For this to execute successfully, like just about everything else in this
app, you need boto installed and configured properly.

This command assumes you've already either run syncdb or otherwise have 
already created the tables that correspond to this app's models.  That is
because this command will sync up the table with new/changed data from
your S3 buckets.



.. _pip: http://pip.openplans.org/
.. _Amazon AWS: http://aws.amazon.com/
